// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HyperKYC
import Dispatch
import Foundation
@_exported import HyperKYC
import HyperSnapSDK
import MobileCoreServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HyperKycConfig : ObjectiveC.NSObject {
  public init(appId: Swift.String, appKey: Swift.String, workflowId: Swift.String, transactionId: Swift.String)
  public init(accessToken: Swift.String, workflowId: Swift.String, transactionId: Swift.String)
  public func setInputs(inputs: [Swift.String : Swift.String])
  public func setDefaultLangCode(language: Swift.String)
  @objc deinit
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension HyperKYC.AnyCodable : HyperKYC._AnyEncodable, HyperKYC._AnyDecodable {
}
extension HyperKYC.AnyCodable : Swift.Equatable {
  public static func == (lhs: HyperKYC.AnyCodable, rhs: HyperKYC.AnyCodable) -> Swift.Bool
}
extension HyperKYC.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HyperKYC.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension HyperKYC.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension HyperKYC.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HKYCBundleLocator : ObjectiveC.NSObject {
  public static func getHyperKYCResourcesBundle() -> Foundation.Bundle?
  public static func getHVResourcesBundle() -> Foundation.Bundle?
  @objc override dynamic public init()
  @objc deinit
}
public struct DocCaptureApiDetail : Swift.Codable {
  public var metadata: HyperKYC.Metadata {
    get
  }
  public var status: Swift.String {
    get
  }
  public var statusCode: Swift.Int {
    get
  }
  public var result: HyperKYC.DocResultObject? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocResultObject : Swift.Codable {
  public var details: [HyperKYC.OCRApiStructure]? {
    get
  }
  public var error: Swift.String? {
    get
  }
  public var summary: HyperKYC.Summary? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OCRApiStructure : Swift.Codable {
  public var idType: Swift.String? {
    get
  }
  public var fieldsExtracted: HyperKYC.FieldsExtracted? {
    get
  }
  public var qualityChecks: HyperKYC.DocQualityChecks? {
    get
  }
  public var ruleChecks: HyperKYC.RuleChecks? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FieldsExtracted : Swift.Codable {
  public var idNumber: HyperKYC.Fieldvalue? {
    get
  }
  public var firstName: HyperKYC.Fieldvalue? {
    get
  }
  public var middleName: HyperKYC.Fieldvalue? {
    get
  }
  public var lastName: HyperKYC.Fieldvalue? {
    get
  }
  public var fullName: HyperKYC.Fieldvalue? {
    get
  }
  public var dateOfBirth: HyperKYC.Fieldvalue? {
    get
  }
  public var dateOfIssue: HyperKYC.Fieldvalue? {
    get
  }
  public var dateOfExpiry: HyperKYC.Fieldvalue? {
    get
  }
  public var countryCode: HyperKYC.Fieldvalue? {
    get
  }
  public var type: HyperKYC.Fieldvalue? {
    get
  }
  public var gender: HyperKYC.Fieldvalue? {
    get
  }
  public var placeOfBirth: HyperKYC.Fieldvalue? {
    get
  }
  public var placeOfIssue: HyperKYC.Fieldvalue? {
    get
  }
  public var yearOfBirth: HyperKYC.Fieldvalue? {
    get
  }
  public var age: HyperKYC.Fieldvalue? {
    get
  }
  public var fatherName: HyperKYC.Fieldvalue? {
    get
  }
  public var motherName: HyperKYC.Fieldvalue? {
    get
  }
  public var husbandName: HyperKYC.Fieldvalue? {
    get
  }
  public var spouseName: HyperKYC.Fieldvalue? {
    get
  }
  public var nationality: HyperKYC.Fieldvalue? {
    get
  }
  public var mrzString: HyperKYC.Fieldvalue? {
    get
  }
  public var hometown: HyperKYC.Fieldvalue? {
    get
  }
  public var address: HyperKYC.Address? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Address : Swift.Codable {
  public var value: Swift.String? {
    get
  }
  public var confidence: Swift.String? {
    get
  }
  public var score: HyperKYC.AnyCodable? {
    get
  }
  public var houseNumber: Swift.String? {
    get
  }
  public var additionalInfo: Swift.String? {
    get
  }
  public var province: Swift.String? {
    get
  }
  public var district: Swift.String? {
    get
  }
  public var street: Swift.String? {
    get
  }
  public var zipCode: Swift.String? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocQualityChecks : Swift.Codable {
  public var blur: HyperKYC.Fieldvalue? {
    get
  }
  public var glare: HyperKYC.Fieldvalue? {
    get
  }
  public var blackAndWhite: HyperKYC.Fieldvalue? {
    get
  }
  public var capturedFromScreen: HyperKYC.Fieldvalue? {
    get
  }
  public var whiteBackground: HyperKYC.Fieldvalue? {
    get
  }
  public var cutId: HyperKYC.Fieldvalue? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RuleChecks : Swift.Codable {
  public var idNumberInvalid: HyperKYC.Fieldvalue? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Metadata : Swift.Codable {
  public var data: Swift.String? {
    get
  }
  public var customerId: Swift.String? {
    get
  }
  public var requestId: Swift.String? {
    get
  }
  public var transactionId: Swift.String? {
    get
  }
  public var attemptCount: Swift.Int? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Summary : Swift.Codable {
  public var action: Swift.String? {
    get
  }
  public var details: [HyperKYC.Details] {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Details : Swift.Codable {
  public var code: Swift.String? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Fieldvalue : Swift.Codable {
  public var value: Swift.String? {
    get
  }
  public var confidence: Swift.String? {
    get
  }
  public var score: Swift.Double? {
    get
  }
  public var reviewNeeded: Swift.String? {
    get
  }
  public var line1: Swift.String? {
    get
  }
  public var line2: Swift.String? {
    get
  }
  public init(value: Swift.String? = nil, confidence: Swift.String? = nil, score: Swift.Double? = nil, reviewNeeded: Swift.String? = nil, line1: Swift.String? = nil, line2: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc public class HyperKycError : ObjectiveC.NSObject {
  public static let HS_INTERNAL_SDK_ERROR: Swift.Int
  public static let HS_OPERATION_CANCELLED_BY_USER_ERROR: Swift.Int
  public static let HS_PERMISSIONS_NOT_GRANTED_ERROR: Swift.Int
  public static let HS_HARDWARE_ERROR: Swift.Int
  public static let HS_INPUT_ERROR: Swift.Int
  public static let HS_QR_PARSER_ERROR: Swift.Int
  public static let HS_LOCATION_PERMISSION_NOT_AVAILABLE_ERROR: Swift.Int
  public static let HS_INITIALIZATION_ERROR: Swift.Int
  public static let HS_NETWORK_ERROR: Swift.Int
  public static let HS_INTERNAL_SERVER_ERROR: Swift.Int
  public static let HS_SSL_CONNECT_ERROR: Swift.Int
  public static let HS_ACTIVE_SESSION_ERROR: Swift.Int
  public static let HS_TRANSACTION_ID_EMPTY: Swift.Int
  public static let HS_SIGNATURE_FAILED_ERROR: Swift.Int
  public static let HS_FACE_DETECTION_ERROR: Swift.Int
  public static let HS_BLURRY_FACE_DETECTION_ERROR: Swift.Int
  public static let HS_INSTRUCTION_ERROR: Swift.Int
  public static let HS_QR_SCANNER_ERROR: Swift.Int
  public static let HS_GPS_ACCESS_DENIED: Swift.Int
  public static let SDK_CONFIG_ERROR: Swift.Int
  public static let SDK_INPUT_ERROR: Swift.Int
  public static let USER_CANCELLED_ERROR: Swift.Int
  public static let WORKFLOW_CONFIG_ERROR: Swift.Int
  public static let WORKFLOW_ERROR: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public struct CountryResult {
  public var moduleId: Swift.String {
    get
  }
  public var id: Swift.String? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var region: Swift.String? {
    get
  }
  public var baseUrl: Swift.String? {
    get
  }
}
public struct DocResult {
  public var moduleId: Swift.String {
    get
  }
  public var documentId: Swift.String {
    get
  }
  public var docDataList: [HyperKYC.DocData] {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct DocData {
  public var side: Swift.String? {
    get
  }
  public var docImagePath: Swift.String? {
    get
  }
  public var action: Swift.String? {
    get
  }
  public var responseHeaders: [Swift.String : Swift.String]? {
    get
  }
  public var responseResult: HyperKYC.DocCaptureApiDetail? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct FaceResult {
  public var moduleId: Swift.String {
    get
  }
  public var faceData: HyperKYC.FaceData {
    get
  }
}
public struct FaceData {
  public var croppedFaceImagePath: Swift.String? {
    get
  }
  public var fullFaceImagePath: Swift.String? {
    get
  }
  public var videoPath: Swift.String? {
    get
  }
  public var action: Swift.String? {
    get
  }
  public var responseHeaders: [Swift.String : Swift.String]? {
    get
  }
  public var responseResult: HyperKYC.FaceCaptureApiDetail? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct APIResult {
  public var moduleId: Swift.String {
    get
  }
  public var apiData: HyperKYC.APIData {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct APIData {
  public var responseCode: Swift.Int? {
    get
  }
  public var responseBodyRaw: [Swift.String : Any]? {
    get
  }
  public var responseHeaders: [Swift.String : Swift.String]? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct FormResult {
  public var moduleId: Swift.String {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct WebviewResult {
  public var moduleId: Swift.String {
    get
  }
  public var webviewData: HyperKYC.WebviewData {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public struct WebviewData {
  public var rawData: Swift.String? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
@available(*, deprecated, message: "Use generic APIResult")
public struct FaceMatchDataResult {
  public var moduleId: Swift.String {
    get
  }
  public var documentId: Swift.String {
    get
  }
  public var facematchData: HyperKYC.FaceMatchData {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
@available(*, deprecated, message: "Use generic APIData")
public struct FaceMatchData {
  public var action: Swift.String? {
    get
  }
  public var responseHeaders: [Swift.String : Swift.String]? {
    get
  }
  public var responseResult: HyperKYC.FaceMatchApiDetail? {
    get
  }
  public var responseResultRaw: [Swift.String : Any]? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
}
public enum HyperKycFlow {
  case document(config: HyperKYC.DocFlowConfig? = nil)
  case face(config: HyperKYC.FaceFlowConfig? = nil)
  case api(config: HyperKYC.ApiFlowConfig? = nil)
}
public class DocFlowConfig {
  public init(useForFaceMatch: Swift.Bool, countryId: Swift.String? = nil, documentId: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FaceFlowConfig {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiFlowConfig {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class HKYCBrandingLayout : UIKit.UIStackView {
  @objc @_Concurrency.MainActor(unsafe) public func showBranding(show: Swift.Bool)
  @objc deinit
}
public struct KycCountries : Swift.Codable {
  public var countries: [HyperKYC.KycCountry] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KycCountry : Swift.Codable {
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var region: Swift.String? {
    get
  }
  public var enabled: Swift.Bool {
    get
  }
  public var documents: [HyperKYC.KycDocument] {
    get
  }
  public var base_url: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension HyperKYC.AnyEncodable : HyperKYC._AnyEncodable {
}
extension HyperKYC._AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension HyperKYC.AnyEncodable : Swift.Equatable {
  public static func == (lhs: HyperKYC.AnyEncodable, rhs: HyperKYC.AnyEncodable) -> Swift.Bool
}
extension HyperKYC.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HyperKYC.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension HyperKYC.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension HyperKYC._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension HyperKYC.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FaceMatchApiDetail : Swift.Codable {
  public var metadata: HyperKYC.Metadata {
    get
  }
  public var status: Swift.String {
    get
  }
  public var statusCode: Swift.Int {
    get
  }
  public var result: HyperKYC.FaceMatchResult? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceMatchResult : Swift.Codable {
  public var details: HyperKYC.FaceMatchApiStructure? {
    get
  }
  public var error: Swift.String? {
    get
  }
  public var summary: HyperKYC.Summary? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceMatchApiStructure : Swift.Codable {
  public var matchScore: Swift.Float? {
    get
  }
  public var conf: Swift.Float? {
    get
  }
  public var match: HyperKYC.Fieldvalue? {
    get
  }
  public var toBeReviewed: Swift.String? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceCaptureApiDetail : Swift.Codable {
  public var metadata: HyperKYC.Metadata {
    get
  }
  public var status: Swift.String {
    get
  }
  public var statusCode: Swift.Int {
    get
  }
  public var result: HyperKYC.FaceResultObject? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceResultObject : Swift.Codable {
  public var details: HyperKYC.LivenessApiStructure? {
    get
  }
  public var error: Swift.String? {
    get
  }
  public var summary: HyperKYC.Summary? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LivenessApiStructure : Swift.Codable {
  public var liveFace: HyperKYC.Fieldvalue? {
    get
  }
  public var live: Swift.String? {
    get
  }
  public var livenessScore: Swift.String? {
    get
  }
  public var toBeReviewed: Swift.String? {
    get
  }
  public var qualityChecks: HyperKYC.FaceQualityChecks? {
    get
  }
  public var error: Swift.String? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceQualityChecks : Swift.Codable {
  public var eyesClosed: HyperKYC.Fieldvalue? {
    get
  }
  public var maskPresent: HyperKYC.Fieldvalue? {
    get
  }
  public var multipleFaces: HyperKYC.Fieldvalue? {
    get
  }
  public var blur: HyperKYC.Fieldvalue? {
    get
  }
  public var asDictionary: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class HyperKyc : ObjectiveC.NSObject {
  @objc public static func launch(_ callingVC: UIKit.UIViewController, hyperKycConfig: HyperKYC.HyperKycConfig, _ completionHandler: @escaping (_ hyperKycResult: HyperKYC.HyperKycResult) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class HyperKycResult : ObjectiveC.NSObject {
  public var status: Swift.String! {
    get
  }
  public var transactionId: Swift.String! {
    get
  }
  public var details: [Swift.String : Swift.String?] {
    get
  }
  public var errorCode: Swift.Int? {
    get
  }
  public var errorMessage: Swift.String? {
    get
  }
  public var latestModule: Swift.String? {
    get
  }
  public init(status: Swift.String, transactionId: Swift.String, details: [Swift.String : Swift.String?], errorCode: Swift.Int?, errorMessage: Swift.String?, latestModule: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HyperKycData : ObjectiveC.NSObject {
  public var countryResult: HyperKYC.CountryResult? {
    get
  }
  public var docResultList: [HyperKYC.DocResult] {
    get
  }
  public var faceResult: HyperKYC.FaceResult? {
    get
  }
  public var apiResultList: [HyperKYC.APIResult] {
    get
  }
  public var formResultList: [HyperKYC.FormResult] {
    get
  }
  public var webviewResultList: [HyperKYC.WebviewResult] {
    get
  }
  @objc deinit
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension HyperKYC.AnyDecodable : HyperKYC._AnyDecodable {
}
extension HyperKYC._AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension HyperKYC.AnyDecodable : Swift.Equatable {
  public static func == (lhs: HyperKYC.AnyDecodable, rhs: HyperKYC.AnyDecodable) -> Swift.Bool
}
extension HyperKYC.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension HyperKYC.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension HyperKYC.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCActivityLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCActivityIndicator : UIKit.UIActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setStyle(_ style: UIKit.UIActivityIndicatorView.Style)
  @objc @_Concurrency.MainActor(unsafe) public static func setColor(_ color: UIKit.UIColor)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCTitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCSubDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCErrorMessageLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCErrorRetryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCSelectedCountryView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCDocumentCell : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCCountryPickerContinueButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCFormVCAffirmativeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HKYCFormVCNegativeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
public struct KycDocument : Swift.Codable, Swift.Hashable {
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var sides: [Swift.String] {
    get
  }
  public var type: Swift.String {
    get
  }
  public var sidesConfig: HyperKYC.SidesConfig? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: HyperKYC.KycDocument, b: HyperKYC.KycDocument) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SidesConfig : Swift.Codable, Swift.Hashable {
  public var readBarcode: [Swift.String] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: HyperKYC.SidesConfig, b: HyperKYC.SidesConfig) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkFlowConfig : Swift.Codable {
  public var properties: HyperKYC.WorkflowProperties? {
    get
  }
  public var modules: [HyperKYC.WorkflowModule] {
    get
  }
  public var conditions: [Swift.String : HyperKYC.WorkflowCondition]? {
    get
  }
  public var conditionalVariables: [Swift.String : HyperKYC.WorkflowCondition]? {
    get
  }
  public var sdkResponse: [Swift.String : Swift.String]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowProperties : Swift.Codable {
  public var sdkVersions: [Swift.String : HyperKYC.SDKVersion]? {
    get
  }
  public var inputsRequired: [Swift.String : Swift.String]? {
    get
  }
  public var textConfigSource: [Swift.String : Swift.String]? {
    get
  }
  public var uiConfigSource: Swift.String? {
    get
  }
  public enum PlatformKey : Swift.String, Swift.Codable {
    case sdkVersionMobileKey
    case unknown
    public init(from decoder: Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SDKVersion : Swift.Codable {
  public var minimum: Swift.String? {
    get
  }
  public var maximum: Swift.String? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowModule : Swift.Codable {
  public enum WorkflowModuleType : Swift.String, Swift.Codable {
    case type_country
    case type_document
    case type_face
    case type_api
    case type_form
    case type_webview
    case unknown
    public init(from decoder: Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String {
    get
  }
  public var type: HyperKYC.WorkflowModule.WorkflowModuleType {
    get
  }
  public var subType: Swift.String {
    get
  }
  public var nextStep: Swift.String {
    get
  }
  public var previousStep: Swift.String? {
    get
  }
  public var properties: HyperKYC.WorkflowModuleProperties? {
    get
  }
  public var variables: [HyperKYC.WorkflowModuleVariable]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowModuleProperties : Swift.Codable {
  public var countriesSupported: [Swift.String]? {
    get
  }
  public var allowUpload: Swift.Bool? {
    get
  }
  public var countryId: Swift.String? {
    get
  }
  public var documentsSupported: [Swift.String : [Swift.String]]? {
    get
  }
  public var documentsOverride: [Swift.String : [Swift.String : HyperKYC.DocumentsOverride]]? {
    get
  }
  public var showReview: Swift.Bool? {
    get
  }
  public var autoCapture: Swift.Bool? {
    get
  }
  public var autoCaptureDuration: Swift.Int? {
    get
  }
  public var videoRecording: Swift.Bool? {
    get
  }
  public var videoRecordingDuration: Swift.Int? {
    get
  }
  public var alertTextBox: Swift.Bool? {
    get
  }
  public var showInstruction: Swift.Bool? {
    get
  }
  public var url: Swift.String? {
    get
  }
  public var apiType: Swift.String? {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
  public var requestParameters: [HyperKYC.WorkflowModuleRequestParam]? {
    get
  }
  public var requestBody: [Swift.String : HyperKYC.AnyCodable]? {
    get
  }
  public var data: HyperKYC.WebviewModuleProperty? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowModuleRequestParam : Swift.Codable {
  public var name: Swift.String {
    get
  }
  public var value: Swift.String {
    get
  }
  public var type: Swift.String? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowModuleVariable : Swift.Codable {
  public var name: Swift.String {
    get
  }
  public var path: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WebviewModuleProperty : Swift.Codable {
  public var queryParams: [Swift.String : Swift.String]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WorkflowCondition : Swift.Codable {
  public var if_false: Swift.String {
    get
  }
  public var if_true: Swift.String {
    get
  }
  public var rule: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocumentsOverride : Swift.Codable {
  public var sides: [Swift.String] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
extension UIKit.UIImage {
  public func withRoundedCorners(radius: CoreGraphics.CGFloat? = nil) -> UIKit.UIImage?
}
extension HyperKYC.HKYCCountryPickerContinueButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
public enum HyperKycStatus : Swift.String {
  case autoApproved
  case autoDeclined
  case manuallyApproved
  case manuallyDeclined
  case ongoing
  case needsReview
  case userCancelled
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension HyperKYC.WorkflowProperties.PlatformKey : Swift.Equatable {}
extension HyperKYC.WorkflowProperties.PlatformKey : Swift.Hashable {}
extension HyperKYC.WorkflowProperties.PlatformKey : Swift.RawRepresentable {}
extension HyperKYC.WorkflowModule.WorkflowModuleType : Swift.Equatable {}
extension HyperKYC.WorkflowModule.WorkflowModuleType : Swift.Hashable {}
extension HyperKYC.WorkflowModule.WorkflowModuleType : Swift.RawRepresentable {}
extension HyperKYC.HyperKycStatus : Swift.Equatable {}
extension HyperKYC.HyperKycStatus : Swift.Hashable {}
extension HyperKYC.HyperKycStatus : Swift.RawRepresentable {}
